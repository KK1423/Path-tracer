#include <iostream>
#include <SFML/Graphics.hpp>
#include <stdlib.h>
#include <math.h>
//#include <Mouse.hpp>
#define Triangle = 4;
#define pi = 3.14159;
using namespace std;
sf::RenderWindow window(sf::VideoMode(1000, 1000), "Raytracer");
class Material
{
public:
    float alpha,diffuseglossy,ior,r,g,b,emission;
    Material() {}
    Material(float a, float d,float iOr, int re,int gr, int bl)
    {
        alpha = a;
        diffuseglossy = d;
        r = re;
        g = gr;
        b = bl;
        ior = iOr;
        emission = 0;
    }
    Material(float a, float d,float iOr, int re,int gr, int bl,float em)
    {
        alpha = a;
        diffuseglossy = d;
        r = re;
        g = gr;
        b = bl;
        ior = iOr;
        emission = em;
    }
};
float rad(float degr)
{
    degr = (degr*3.14159/180.0);
    return degr;
}
float invsqrt( float number )
{
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y  = number;
    i  = * ( long * ) &y;                       // evil floating point bit level hacking
    i  = 0x5f3759df - ( i >> 1 );
    y  = * ( float * ) &i;
    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
//      y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

    return y;
}
class d3Vector
{

public:
    float x,y,z;
    d3Vector(float X = 0,float Y = 0,float Z = 0):x(X), y(Y), z(Z) {}
    d3Vector scalarmultiply (float b)
    {
        return d3Vector((this->x*b),(this->y*b),(this->z*b));
    }
    d3Vector individualmultiply (d3Vector coefficients)
    {
        d3Vector result;
        result = d3Vector((this->x)*coefficients.x,(this->y)*coefficients.y,(this->z)*coefficients.z);
        return result;
    }
    float dot(d3Vector b)
    {
        return ((this->x*b.x)+(this->y*b.y)+(this->z*b.z));
    }
    float magnitude()
    {
        return 1.0/invsqrt(x*x+y*y+z*z);
    }
    d3Vector normalize()
    {
        float d = invsqrt(x*x+y*y+z*z);
        return d3Vector(x*d,y*d,z*d);
    };
    float project(d3Vector aO,d3Vector aV)
    {
        d3Vector b=this->subtract(aO);
        aV=aV.normalize();
        return (b.dot(aV));
    }
    d3Vector add(d3Vector a)
    {
        return d3Vector((this->x)+a.x,(this->y)+a.y,(this->z)+a.z);
    }
    d3Vector subtract(d3Vector a)
    {
        return d3Vector((x)-a.x,(y)-a.y,(z)-a.z);
    }
    d3Vector rotatearoundorgin(float zenith,float attitude)
    {
        d3Vector out(0,0,0);
        d3Vector in = *this;
        float cosz = cosf(rad(zenith));
        float sinz = sinf(rad(zenith));
        float cosy = cosf(rad(attitude));
        float siny = sinf(rad(attitude));
        out = d3Vector((cosy*cosz)*in.x-(sinz)*in.y-(siny*cosz)*in.z,(cosy*sinz)*in.x+(cosz)*in.y-(siny*cosz)*in.z,(siny)*in.x+(cosy)*in.z);
        return out;
    }
};
class Sphere
{
public:
    float r;
    d3Vector pos;
    Material material;
    Sphere() {};
    Sphere(float R,float X,float Y,float Z,Material m): r(R)
    {
        material = m;
        pos.x = X;
        pos.y = Y;
        pos.z = Z;
    };
};
class Scene
{
public:
    Sphere* spherepointer;
    int spherenum;
    Scene(int sphereQuantity,Sphere * spheres)
    {
        spherenum = sphereQuantity;
        spherepointer = spheres;
    }
};
struct hitdata
{
    bool hit;
    float t;
    d3Vector coord;
    d3Vector normal;
    Material material;
};
class ray
{
public:
    d3Vector O,V;
    ray(d3Vector o,d3Vector v) : O(o),V(v) {};
    d3Vector endpoint()
    {
        return O.add(V);
    }
    ray rotatearoundorgin(int zenith,int attitude)
    {
        return(ray(O.rotatearoundorgin(zenith,attitude),V.rotatearoundorgin(zenith,attitude)));
    }
    ray scalearound(ray cize)
    {
        d3Vector endpt = this->endpoint();
        d3Vector orgin = this->O;
        endpt = endpt.subtract(cize.O);
        orgin = orgin.subtract(cize.O);
        endpt = endpt.individualmultiply(cize.V);
        orgin = orgin.individualmultiply(cize.V);
        endpt = endpt.add(cize.O);
        orgin = orgin.add(cize.O);
        return ray(orgin,endpt.subtract(orgin));
    }
    hitdata intersectwith(Sphere sphere)
    {
        d3Vector projected;
        float t = V.dot(sphere.pos.subtract(O));
        projected = V.scalarmultiply(t);
        float distnce = (projected.subtract(sphere.pos)).magnitude();
        hitdata outdata;
        outdata.hit = false;
        outdata.t = 110;
        if(distnce<sphere.r)
        {
            outdata.hit = true;
            float deltaT = sqrtf((sphere.r*sphere.r)-(distnce*distnce));
            outdata.coord = O.add(V.scalarmultiply(t-deltaT));
            outdata.normal = outdata.coord.subtract(sphere.pos);
            outdata.normal = outdata.normal.normalize();
            outdata.material = sphere.material;
            outdata.t = t-deltaT;
        }
        return outdata;
    }
    hitdata intersectwith(Scene scene)
    {
        float lowestt = 100;
        hitdata lowesthit;
        hitdata hitcache;
        hitcache.hit = false;
        int lowestindex = 0;
        for(int a = 0; a<scene.spherenum; a++)
        {
            hitcache = this->intersectwith(scene.spherepointer[a]);
            if(hitcache.hit)
            {
                if(hitcache.t<lowestt)
                {
                    lowestindex = a;
                    lowesthit = hitcache;
                    lowestt = hitcache.t;
                }
            }
        }
        return lowesthit;
    }
};
ray getcameradata()
{
    static d3Vector position(0,0,0);
    static d3Vector rotation(0,0,0);
    position = position.add(d3Vector(sf::Keyboard::isKeyPressed(sf::Keyboard::Up),sf::Keyboard::isKeyPressed(sf::Keyboard::Right),0).rotatearoundorgin(rotation.x,rotation.y));
    rotation = rotation.add(d3Vector(sf::Mouse::getPosition(window).x + 500,sf::Mouse::getPosition(window).y + 500,0));
    sf::Mouse::setPosition(sf::Vector2i(500,500));
    return ray((position),(rotation));

}
d3Vector trace(ray inray,Scene scene)
{
    hitdata objecthit;
    objecthit = inray.intersectwith(scene);
    if(!objecthit.hit)
    {
        return d3Vector(50,50,50);
    }
    return d3Vector(0,0,0);
}
sf::Color computePixel (int x,int y,int seed)
{
    d3Vector test(x,y,0);
    test = test.rotatearoundorgin(seed,0);
    //std::cout<<" "<<test.x<<" "<<test.y<<" "<<test.z<<endl;
    return sf::Color(test.x,test.y,0);
}
Scene generateScene ()
{
    Sphere spheres[4] =
    {
        Sphere(1, 3.7,-0.8,-0.7, Material(1,0.8,1.4,84,255,255)),
        Sphere(2, 0,2.0,-0.2, Material(1,0.6,1.4,190,64,190)),
        Sphere(3, -2,-3,0, Material(1,0,0.5,255,255,76)),
        Sphere(1, -1.8,0.04,3, Material(1,0,0,255,255,255,20))
    };
    return Scene(4,&spheres);

}
int main()
{
    srand(5);
    srand(rand());
    sf::Image shape;
    int n = 1;
    sf::Texture texture;
    texture.create(1000,1000);
    sf::Sprite sprite(texture);
    shape.create(1000,1000,sf::Color::Black);
    srand(rand());
    Scene scene = generateScene();
    while (window.isOpen())
    {
        int x=0,y=0;
        sf::Event event;
        n++;
        while(x<999)
        {
            //srand(rand()%1000);
            while(y<999)
            {
                shape.setPixel(x,y,computePixel(x,y,n*2));
                y++;
            }
            y = 0;
            x++;
            if (window.pollEvent(event))
            {
                if (event.type == sf::Event::Closed)
                    window.close();
            }
            if((x%1000)==1)
            {
                texture.update(shape);
                sprite.setTexture(texture,false);
                window.draw(sprite);
                window.display();
            }
            if(!window.isOpen())
            {
                break;
            };
        }
        x = 0;
        texture.update(shape);
        sprite.setTexture(texture,false);
        window.draw(sprite);
        window.display();

        /* if(1 == 1)
         {
             shape.create(1000,1000,sf::Color::Black);
         }*/
        //sf::sleep(sf::milliseconds(10));
    }

    return 0;
}


